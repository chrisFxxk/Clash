name: Sync Clash Rules Files to Gist

on:
  push:
    paths:
      - '**.list'
    branches:
      - main
  
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      
      - name: 配置 Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
      
      - name: 克隆 Gist
        env:
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
          GIST_ID: ${{ secrets.CLASH_RULES_GIST_ID }}
        run: |
          git clone https://${GIST_TOKEN}@gist.github.com/${GIST_ID}.git gist-repo
      
      - name: 智能同步（自动检测增删改）
        run: |
          echo "=========================================="
          echo "🔍 开始智能同步 .list 文件"
          echo "=========================================="
          echo ""
          
          # ===== 第一步：复制所有当前存在的 .list 文件 =====
          echo "📋 步骤 1: 扫描并复制所有 .list 文件"
          echo ""
          
          # 查找所有 .list 文件（排除 gist-repo 目录）
          find . -name "*.list" -not -path "./gist-repo/*" -not -path "./.git/*" | while read file; do
            filename=$(basename "$file")
            cp "$file" "gist-repo/$filename"
            echo "  ✓ 已同步: $filename"
          done
          
          ACTUAL_COPIED=$(find . -name "*.list" -not -path "./gist-repo/*" -not -path "./.git/*" | wc -l)
          echo ""
          echo "  📊 共复制 $ACTUAL_COPIED 个 .list 文件"
          echo ""
          
          # ===== 第二步：删除 Gist 中多余的文件 =====
          echo "🗑️  步骤 2: 清理 Gist 中已删除的文件"
          echo ""
          
          DELETED_COUNT=0
          
          cd gist-repo
          
          # 使用 ls 命令获取文件列表
          if ls *.list >/dev/null 2>&1; then
            for gist_file in *.list; do
              # 检查源仓库中是否存在该文件
              if [ ! -f "../$gist_file" ]; then
                rm -f "$gist_file"
                echo "  ✗ 已删除: $gist_file （源仓库中已不存在）"
                DELETED_COUNT=$((DELETED_COUNT + 1))
              fi
            done
          fi
          
          cd ..
          
          if [ $DELETED_COUNT -eq 0 ]; then
            echo "  ℹ️  无需删除文件"
          else
            echo ""
            echo "  📊 共删除 $DELETED_COUNT 个过时文件"
          fi
          
          echo ""
          echo "=========================================="
          echo "✅ 智能同步完成"
          echo "=========================================="
      
      - name: 显示同步结果
        working-directory: ./gist-repo
        run: |
          echo ""
          echo "📦 Gist 中的文件列表："
          echo ""
          
          if ls *.list >/dev/null 2>&1; then
            ls -lh *.list
          else
            echo "  (无 .list 文件)"
          fi
          
          echo ""
          
          FILE_COUNT=$(ls -1 *.list 2>/dev/null | wc -l)
          TOTAL_SIZE=$(du -sh . | cut -f1)
          
          echo "📊 统计信息："
          echo "  文件数量: $FILE_COUNT"
          echo "  总大小: $TOTAL_SIZE"
      
      - name: 提交更改
        working-directory: ./gist-repo
        run: |
          git add -A
          
          if git diff --staged --quiet; then
            echo ""
            echo "ℹ️  没有变更，跳过推送"
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
          else
            echo ""
            echo "📝 检测到变更，准备提交..."
            
            # 统计变更
            ADDED=$(git diff --staged --name-only --diff-filter=A | wc -l)
            MODIFIED=$(git diff --staged --name-only --diff-filter=M | wc -l)
            DELETED=$(git diff --staged --name-only --diff-filter=D | wc -l)
            
            # 创建提交信息
            cat > /tmp/commit_msg.txt << 'COMMIT_EOF'
          Auto-sync at $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          Changes: +${ADDED} ~${MODIFIED} -${DELETED}
          COMMIT_EOF
            
            # 替换变量
            sed -i "s/\$(date -u '+%Y-%m-%d %H:%M:%S UTC')/$(date -u '+%Y-%m-%d %H:%M:%S UTC')/g" /tmp/commit_msg.txt
            sed -i "s/\${ADDED}/${ADDED}/g" /tmp/commit_msg.txt
            sed -i "s/\${MODIFIED}/${MODIFIED}/g" /tmp/commit_msg.txt
            sed -i "s/\${DELETED}/${DELETED}/g" /tmp/commit_msg.txt
            
            # 添加文件列表
            if [ $ADDED -gt 0 ]; then
              echo "" >> /tmp/commit_msg.txt
              echo "Added:" >> /tmp/commit_msg.txt
              git diff --staged --name-only --diff-filter=A | sed 's/^/  - /' >> /tmp/commit_msg.txt
            fi
            
            if [ $MODIFIED -gt 0 ]; then
              echo "" >> /tmp/commit_msg.txt
              echo "Modified:" >> /tmp/commit_msg.txt
              git diff --staged --name-only --diff-filter=M | sed 's/^/  - /' >> /tmp/commit_msg.txt
            fi
            
            if [ $DELETED -gt 0 ]; then
              echo "" >> /tmp/commit_msg.txt
              echo "Deleted:" >> /tmp/commit_msg.txt
              git diff --staged --name-only --diff-filter=D | sed 's/^/  - /' >> /tmp/commit_msg.txt
            fi
            
            # 提交
            git commit -F /tmp/commit_msg.txt
            rm /tmp/commit_msg.txt
            
            echo "HAS_CHANGES=true" >> $GITHUB_ENV
          fi
      
      - name: 推送到 Gist
        if: env.HAS_CHANGES == 'true'
        working-directory: ./gist-repo
        env:
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
          GIST_ID: ${{ secrets.CLASH_RULES_GIST_ID }}
        run: |
          git remote set-url origin https://${GIST_TOKEN}@gist.github.com/${GIST_ID}.git
          git pull --rebase origin master || git pull --rebase origin main
          git push origin HEAD
          
          echo ""
          echo "=========================================="
          echo "🎉 成功推送到 Gist！"
          echo "=========================================="
          echo ""
          echo "📍 Gist 地址:"
          echo "   https://gist.github.com/${GIST_ID}"
