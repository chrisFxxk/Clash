name: Sync Remote Rules to Gist

on:
  # 每天0点10分执行
  schedule:
    - cron: '10 0 * * *'  # UTC 时间 0:10，北京时间 8:10
  
  # 支持手动触发
  workflow_dispatch:
  
  # 配置文件更新时也触发
  push:
    paths:
      - '.github/rules-urls.txt'
    branches:
      - main

jobs:
  sync:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      
      - name: 配置 Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
      
      - name: 克隆 Gist
        env:
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
          GIST_ID: ${{ secrets.REMOTE_CLASH_RULES_GIST_ID }}
        run: |
          git clone https://${GIST_TOKEN}@gist.github.com/${GIST_ID}.git gist-repo
      
      - name: 下载远程规则文件
        run: |
          CONFIG_FILE=".github/rules-urls.txt"
          
          echo "=========================================="
          echo "🌐 开始下载远程规则文件"
          echo "=========================================="
          echo ""
          
          # 检查配置文件是否存在
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "❌ 配置文件不存在: $CONFIG_FILE"
            echo ""
            echo "请创建配置文件并添加规则文件的URL"
            exit 1
          fi
          
          echo "📋 读取配置文件: $CONFIG_FILE"
          echo ""
          
          SUCCESS=0
          FAILED=0
          SKIPPED=0
          
          # 创建临时目录
          mkdir -p /tmp/downloaded_rules
          
          # 读取配置文件，下载每个URL
          while IFS= read -r line || [ -n "$line" ]; do
            # 去除前后空格
            url=$(echo "$line" | xargs)
            
            # 跳过空行和注释行
            [[ -z "$url" || "$url" =~ ^# ]] && continue
            
            # 从URL中提取文件名
            filename=$(basename "$url")
            
            # 如果URL包含查询参数，去除它们
            filename=$(echo "$filename" | cut -d'?' -f1)
            
            echo "📥 下载: $filename"
            echo "   URL: $url"
            
            # 使用 curl 下载文件
            if curl -fsSL -o "/tmp/downloaded_rules/$filename" "$url" --connect-timeout 30 --max-time 120; then
              # 验证文件不为空
              if [ -s "/tmp/downloaded_rules/$filename" ]; then
                # 复制到 Gist 目录
                cp "/tmp/downloaded_rules/$filename" "gist-repo/$filename"
                
                # 获取文件大小
                size=$(du -h "gist-repo/$filename" | cut -f1)
                echo "   ✓ 成功 ($size)"
                SUCCESS=$((SUCCESS + 1))
              else
                echo "   ⚠ 文件为空，跳过"
                rm -f "/tmp/downloaded_rules/$filename"
                SKIPPED=$((SKIPPED + 1))
              fi
            else
              echo "   ✗ 下载失败"
              FAILED=$((FAILED + 1))
            fi
            
            echo ""
          done < "$CONFIG_FILE"
          
          echo "=========================================="
          echo "📊 下载统计"
          echo "=========================================="
          echo "  ✓ 成功: $SUCCESS"
          echo "  ✗ 失败: $FAILED"
          echo "  ⚠ 跳过: $SKIPPED"
          echo "=========================================="
      
      - name: 清理 Gist 中的过期文件
        run: |
          CONFIG_FILE=".github/rules-urls.txt"
          
          echo ""
          echo "🗑️  清理 Gist 中的过期文件..."
          echo ""
          
          cd gist-repo
          
          DELETED=0
          
          # 从配置文件中提取所有文件名
          EXPECTED_FILES=$(grep -v '^#' "../$CONFIG_FILE" | grep -v '^$' | xargs -I {} basename {} | cut -d'?' -f1)
          
          # 检查 Gist 中的每个文件
          for gist_file in $(find . -type f -not -path "./.git/*" | sed 's|^\./||'); do
            # 检查该文件是否在预期列表中
            if ! echo "$EXPECTED_FILES" | grep -q "^${gist_file}$"; then
              rm -f "$gist_file"
              echo "  ✗ 已删除: $gist_file （未在配置中）"
              DELETED=$((DELETED + 1))
            fi
          done
          
          cd ..
          
          if [ $DELETED -eq 0 ]; then
            echo "  ℹ️  无需删除"
          else
            echo ""
            echo "  📊 共删除 $DELETED 个文件"
          fi
      
      - name: 显示同步结果
        working-directory: ./gist-repo
        run: |
          echo ""
          echo "=========================================="
          echo "📦 Gist 中的规则文件"
          echo "=========================================="
          echo ""
          
          if [ -n "$(ls -A . 2>/dev/null | grep -v '^\.git$')" ]; then
            find . -type f -not -path "./.git/*" | while read file; do
              filename=$(basename "$file")
              size=$(du -h "$file" | cut -f1)
              lines=$(wc -l < "$file" 2>/dev/null || echo "0")
              echo "  📄 $filename"
              echo "     大小: $size | 行数: $lines"
            done
          else
            echo "  (无文件)"
          fi
          
          echo ""
          FILE_COUNT=$(find . -type f -not -path "./.git/*" | wc -l)
          TOTAL_SIZE=$(du -sh . 2>/dev/null | cut -f1)
          
          echo "=========================================="
          echo "📊 统计信息"
          echo "=========================================="
          echo "  文件数量: $FILE_COUNT"
          echo "  总大小: $TOTAL_SIZE"
          echo "=========================================="
      
      - name: 提交更改
        working-directory: ./gist-repo
        run: |
          git add -A
          
          if git diff --staged --quiet; then
            echo ""
            echo "ℹ️  规则文件无变更，跳过推送"
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
          else
            echo ""
            echo "📝 检测到变更，准备提交..."
            
            ADDED=$(git diff --staged --name-only --diff-filter=A | wc -l)
            MODIFIED=$(git diff --staged --name-only --diff-filter=M | wc -l)
            DELETED=$(git diff --staged --name-only --diff-filter=D | wc -l)
            
            # 创建详细的提交信息
            cat > /tmp/commit_msg.txt << 'EOF'
          Auto-sync rules at $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          Changes: +ADDED_COUNT ~MODIFIED_COUNT -DELETED_COUNT
          EOF
            
            # 替换占位符
            sed -i "s/\$(date -u '+%Y-%m-%d %H:%M:%S UTC')/$(date -u '+%Y-%m-%d %H:%M:%S UTC')/g" /tmp/commit_msg.txt
            sed -i "s/ADDED_COUNT/${ADDED}/g" /tmp/commit_msg.txt
            sed -i "s/MODIFIED_COUNT/${MODIFIED}/g" /tmp/commit_msg.txt
            sed -i "s/DELETED_COUNT/${DELETED}/g" /tmp/commit_msg.txt
            
            # 添加变更详情
            if [ $ADDED -gt 0 ]; then
              echo "" >> /tmp/commit_msg.txt
              echo "Added:" >> /tmp/commit_msg.txt
              git diff --staged --name-only --diff-filter=A | sed 's/^/  - /' >> /tmp/commit_msg.txt
            fi
            
            if [ $MODIFIED -gt 0 ]; then
              echo "" >> /tmp/commit_msg.txt
              echo "Modified:" >> /tmp/commit_msg.txt
              git diff --staged --name-only --diff-filter=M | sed 's/^/  - /' >> /tmp/commit_msg.txt
            fi
            
            if [ $DELETED -gt 0 ]; then
              echo "" >> /tmp/commit_msg.txt
              echo "Deleted:" >> /tmp/commit_msg.txt
              git diff --staged --name-only --diff-filter=D | sed 's/^/  - /' >> /tmp/commit_msg.txt
            fi
            
            git commit -F /tmp/commit_msg.txt
            rm /tmp/commit_msg.txt
            
            echo "HAS_CHANGES=true" >> $GITHUB_ENV
          fi
      
      - name: 推送到 Gist
        if: env.HAS_CHANGES == 'true'
        working-directory: ./gist-repo
        env:
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
          GIST_ID: ${{ secrets.CLASH_RULES_GIST_ID }}
        run: |
          git remote set-url origin https://${GIST_TOKEN}@gist.github.com/${GIST_ID}.git
          git pull --rebase origin master 2>/dev/null || git pull --rebase origin main
          git push origin HEAD
          
          echo ""
          echo "=========================================="
          echo "🎉 成功推送到 Gist！"
          echo "=========================================="
          echo ""
          echo "📍 Gist 地址:"
          echo "   https://gist.github.com/${GIST_ID}"
          echo ""
          echo "⏰ 下次自动同步: 明天 0:10 UTC (北京时间 8:10)"
          echo "=========================================="
